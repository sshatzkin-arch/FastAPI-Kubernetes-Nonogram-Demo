trigger:
- main

variables:
  imageName: "nonogram"
  containerRegistry: "POC_ACR"
  chartFolderPath: charts/nonogramapi-azure
  versionPrefix: "0.1"
  vmImage: ubuntu-latest

stages:
  - stage: BuildNew
    displayName: Build and Push Docker Image
    jobs:
    - job: BuildAndPushDocker
      pool:
        vmImage: ${{ variables.vmImage }}
      steps:
        - task: Docker@2
          displayName: Login to ACR
          inputs:
            command: login
            containerRegistry: $(containerRegistry)
        - task: Docker@2
          displayName: Build and Push
          inputs:
            command: buildAndPush
            Dockerfile: "**/Dockerfile"
            repository: $(imageName)
        - task: Docker@2
          displayName: Logout of ACR
          inputs:
            command: logout
            containerRegistry: $(containerRegistry)
  - stage: PublishArtifacts
    displayName: Generate and Publish Artifacts
    jobs:
      - job: PublishReleaseArtifact
        pool:
          vmImage: ${{ variables.vmImage }}
        steps:
          - task: Bash@3
            name: GenerateImageArtifacts
            displayName: Generate Image Artifacts with Metadata to Publish
            inputs:
              targetType: inline
              script: |
                mkdir -p $(Build.ArtifactStagingDirectory)/image
                echo "$(SetRepoVar.imageRepository)" > $(Build.ArtifactStagingDirectory)/image/repo.txt
                echo "$(Build.SourceVersion)" > $(Build.ArtifactStagingDirectory)/image/tag.txt
          - task: Bash@3
            name: GenerateHelmArtifacts
            displayName: Generate Helm Artifacts with Metadata to Publish
            inputs:
              targetType: inline
              script: |
                mkdir -p $(Build.ArtifactStagingDirectory)/helm
                echo "$(SetProjectNameVar.projectName)" > $(Build.ArtifactStagingDirectory)/helm/name.txt
          - task: Bash@3
            name: CreateChartsFolder
            displayName: Create Charts folder for Helm
            inputs:
              targetType: inline
              script: mkdir -p $(Build.ArtifactStagingDirectory)/chart
          - task: CopyFiles@2
            name: CopyCharts
            displayName: Copy charts folder to build artifacts
            inputs: 
              sourceFolder: ${{variables.chartFolderPath}}
              targetFolder: $(Build.ArtifactStagingDirectory)/chart
          - task: PublishBuildArtifacts@1
            inputs:
              artifactName: deploy
              pathtoPublish: $(Build.ArtifactStagingDirectory)